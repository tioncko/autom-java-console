==============================

# Áreas implementadas #

Tela Cadastro:
- Cliente
- Fornecedor
- Usuário
- Produtos e Serviços

==============================

# Áreas pendentes #

Tela Cadastro
- Funcionário
- Carro

Tela Loja
- A definir áreas

==============================

# Soluções para implementar #

[PARTE 1] (18/18)

[OK] Validação de exclusão de item da lista de cada classe "Metodos" [exemplo: código X já foi excluído]
[OK] Incluir condição para impressão da mensagem de saída [sout("Alteração concluida") ou sout("a tabela tá vazia")]
[OK] Aplicar validação nos métodos de localização
[OK] Incluir novo método para validar se o atributo getAtividades da tela de fornecedores está vazia, para assim, permitir o insert
[OK] Revisar ajustes feitos na area de fornecedor para as areas Cliente e Usuario (validId)
[OK] Implementar equals e hashcode para CPF e CNPJ
[OK] Aplicar try/catch em métodos que utilizam "throws Exception"
[OK] Validar se os logs implementados estão funcionando da forma que foi planejada
[OK] Descrição dos métodos [o que são, o que fazem e o que retornam]
[OK] Releitura de nomes de variáveis, métodos e classes [exemplo: Map<Integer, Servicos> x = new HashMap<>(); -> Map<Integer, Servicos> mapServ = new HashMap<>();]
[OK] Alterar o README.md com a imagem atual do projeto e ir atualizando conforme o projeto evolui
[OK] (se possível) aplicar cor fixa nos menus (Cor fixa nos títulos)
[OK] Limpar comentários das classes -> DEFINIR ELES COMO RASCUNHO
[OK] Verificar a possibilidade de criar uma validação de response code na parte do cep [Ajuste feito]
[OK] Inserir fornecedores na lista de produtos
[OK] Criar método para remover e incrementar atividades
[OK] Associar as atividades aos fornecedores
[OK] Necessário mudar a forma de coleta de CEP (atual: via XML, atualizar para: via JSON)

[PARTE 2] (8/11)

[OK] Desenvolver área do funcionário
[OK] Padronizar as opções de Menu em todas as áreas
[OK] Ajustar interfaces para que os métodos não fiquem repetitivos
[OK] Desenvolver área do carro
[OK] Associar o funcionário a seu usuário
[OK] Associar a marca ao carro
- Associar o carro ao cliente [LER MEMORANDO ABAIXO]
[OK] Criar API/JSON de lista de clientes para consumo
[OK] Criar API/JSON de lista de funcionários para consumo
[OK] Criar API/JSON de lista de carros para consumo
- Incrementar área do carro dentro da area do cliente [LER MEMORANDO ABAIXO]

==============================

[MEMORANDO]
Criar direcionamentos para cadastros de usuarios e carros em vez de incrementar os dois juntos
Por exemplo:
    Ao finalizar o cadastro do funcionario [OK] e do cliente, perguntar se quer cadastrar o usuario do funcionário [OK] ou o carro do cliente
        - se sim, abre a tela, se não, oferece a opção de menu [OK - FUNCIONÁRIO]
        - independente dos cenários, dentro das telas de cadastro do carro e do usuário [OK] é necessário ter um recurso para localizar o alvo (funcionário ou cliente)
          similar ao que a tela de cadastro de carros tem ao tentar localizar a marca do carro.
    [PARTE DO USUÁRIO OK]

    Sobre a tela de cadastro de usuarios
        - gerar dinamicamente o login com base no funcionario informado e dar a sugestão (ou as sugestões) do usuário gerado [OK]
        - se aceitar algum dos gerados, salva, se não, pedir para digitar [OK]
        - disso, se o login digitado já existir, informar para digitar outro [OK]

    AJUSTE NECESSÁRIO
    verificar parte de alteração do cadastro do usuário para contar com os ajustes feitos acima [OK]
    verificar também a questão das permissões na parte de alteraçao de usuário [OK]

    SOBRE A TELA CLIENTE
    Consumir cliente na tela de cadastro do carro (já enviada via construtor)

    SOBRE A TELA DE USUÁRIO
    Atualizar o nome do cliente com base no codigo do usuário (para retornar o getNome())


